/**
 * Asset URL builder
 * @access private
 * @param {String} $type - Asset type, matching folder name
 * @param {String} $file - Asset file name, including extension
 * @return {URL} - A `url()` function leading to the asset
 */
/*
 * Image asset helper
 * @access public
 * @param {String} $file - Asset file name, including extension
 * @return {URL} - A `url()` function leading to the image
 * @require {function} asset
 */
/*
 * Font asset helper
 * @access public
 * @param {String} $file - Asset file name, including extension
 * @return {URL} - A `url()` function leading to the font
 * @require {function} asset
 */
/**
 * Z-Index function
 * @param {string} $list (Array) - The list to find the current z-index in
 * @param {string} $element (String) - The name of the current element, must be in the $list
 * @returns {number}
 */
/**
 * easing function
 * @param {string} $easeName - The name of the easing function.
 * @returns {string} - Returns a cubic-bezier function with the easing values.
 */
/**
 * Respond To (Breakpoint)
 * @param {string} $name - Name of the breakpoint used in $breakpoints
 */
/**
 * Hover Mixin for applying :hover pseudo styles
 * Add your own implementation for showing hovers
 * Example using Modernizr touch check: html.no-touch &:hover { @content; }
 * Leaving it to just :hover by default. But best practice to always use the mixin
 * @param $extraSelector:string (optional) = an extra selector that can have the same styles as a hover (for mobile/active state)
 */
/**
 * Font Face
 * @param {string} $fontName - Name of the font
 * @param {string} $folderName - Subfolder inside the fonts folder
 * @param {string} $fileName - Name of the font-file
 * @param {string} $fontWeight (normal) - Font weight value
 * @param {string} $fontStyle (normal) - Font style value
 */
/**
 * Aspect ratio, create a :before pseudo element for setting an aspect ratio on an element
 * @param {number} $width (1) - Percentage width
 * @param {number} $height ($width) - Percentage height
 * @param {boolean} $relative (true) - Add relative position to element
 */
/**
 * Position mixin for setting absolute position values
 * The mixin can have multiple arguments providing a number
 * @param {number} $top (0) - Top Position
 * @param {number} $right ($top) - Right Position
 * @param {number} $bottom ($top) - Bottom Position
 * @param {number} $left ($right) - Left Position
 *
 * Or a map of multiple positions
 * @param {map} $args... - A map containing multiple positions (top: 1px, left: 1px)
 */
/**
 * Offset
 * @param {number} $top (0) - Top Offset
 * @param {number} $left (0) - Left Offset
 */
/**
 * Places an element absolute on top of the entire wrapper
 */
/**
 * Size an Element
 * @param {number} $width (1em) - Width of the element
 * @param {number} $height ($width) - Height of the element
 */
/**
 * Creates an arrow
 * @param {string} $direction (up) - Arrow direction: up, down, left or right
 * @param {color} $color (#000) - Arrow color
 * @param {size} $size (10px) - Size of the opposite side of the arrow
 * @param {number} $stretch (1) - Amount of the stretch of the arrow
 * @param {boolean} $exclude-base (false) - Remove the default arrow styling (usefull if you want to modify the direction of the arrow on rollover
 */
.ir {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0; }

.clearfix {
  content: '';
  display: block;
  clear: both; }

.coverer {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  position: absolute; }

.centerer {
  top: 50%;
  left: 50%;
  position: absolute;
  transform: translate(-50%, -50%); }

:root {
  font-size: 62.5%; }

